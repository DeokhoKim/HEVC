#include "common/NAL.h"

#include <cassert>
#include <cstdio>
#include <cstdlib>
#include <deque>

static const unsigned char vps[25] =
{
  0x40, 0x01, 0x0c, 0x01, 0xff, 0xff,
  0x01, 0x60, 0x00, 0x00, 0x03, 0x00,
  0x00, 0x03, 0x00, 0x00, 0x03, 0x00,
  0x00, 0x03, 0x00, 0xba, 0x94, 0x90,
  0x24
};

static const unsigned char vps_payload[22] =
{
  0x0c, 0x01, 0xff, 0xff, 0x01, 0x60,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0xba, 0x94, 0x90,
  0x24
};

static const unsigned char pps[48] =
{
  0x42, 0x01, 0x01, 0x01, 0x60, 0x00,
  0x00, 0x03, 0x00, 0x00, 0x03, 0x00,
  0x00, 0x03, 0x00, 0x00, 0x03, 0x00,
  0xba, 0xa0, 0x0d, 0x08, 0x0f, 0x1f,
  0xe5, 0x94, 0x99, 0x24, 0x6d, 0x86,
  0x16, 0x22, 0xaa, 0x4c, 0x4c, 0x32,
  0xfb, 0x3e, 0xbc, 0xdf, 0x96, 0x7d,
  0x78, 0x51, 0x18, 0x9c, 0xbb, 0x20
};

int main(int argc, const char* argv[])
{
  std::deque<unsigned char> vps_data;

  for(int i=0; i<25; i++) vps_data.push_back(vps[i]);

  HEVC::NALUnit nalu;

  HEVC::NALUnit::read(&nalu, &vps_data);

  assert(nalu.get_type() == HEVC::NAL_UNIT_TYPE::NAL_UNIT_VPS);
  assert(nalu.get_temporal_id()==0);
  assert(nalu.get_reserved_zero_6bits()==0);

  std::deque<unsigned char>& vps_read = nalu.get_data();
  for(auto it=vps_read.begin(); it!=vps_read.end(); it++)
  {
    assert(*it==vps_payload[it-vps_read.begin()]);
  }

  vps_data.clear();
  HEVC::NALUnit::write(&nalu, &vps_data);

  for(auto it=vps_data.begin(); it!=vps_data.end(); it++)
  {
    assert(*it==vps[it-vps_data.begin()]);
  }

  return EXIT_SUCCESS;
}